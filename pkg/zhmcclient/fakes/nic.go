// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.ibm.com/zhmcclient/golang-zhmcclient/pkg/zhmcclient"
)

type NicAPI struct {
	CreateNicStub        func(string, *zhmcclient.NIC) (*zhmcclient.NIC, error)
	createNicMutex       sync.RWMutex
	createNicArgsForCall []struct {
		arg1 string
		arg2 *zhmcclient.NIC
	}
	createNicReturns struct {
		result1 *zhmcclient.NIC
		result2 error
	}
	createNicReturnsOnCall map[int]struct {
		result1 *zhmcclient.NIC
		result2 error
	}
	DeleteNicStub        func(string, string) error
	deleteNicMutex       sync.RWMutex
	deleteNicArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deleteNicReturns struct {
		result1 error
	}
	deleteNicReturnsOnCall map[int]struct {
		result1 error
	}
	GetNicStub        func(string, string) (*zhmcclient.NIC, error)
	getNicMutex       sync.RWMutex
	getNicArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getNicReturns struct {
		result1 *zhmcclient.NIC
		result2 error
	}
	getNicReturnsOnCall map[int]struct {
		result1 *zhmcclient.NIC
		result2 error
	}
	ListNicsStub        func(string) ([]string, error)
	listNicsMutex       sync.RWMutex
	listNicsArgsForCall []struct {
		arg1 string
	}
	listNicsReturns struct {
		result1 []string
		result2 error
	}
	listNicsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *NicAPI) CreateNic(arg1 string, arg2 *zhmcclient.NIC) (*zhmcclient.NIC, error) {
	fake.createNicMutex.Lock()
	ret, specificReturn := fake.createNicReturnsOnCall[len(fake.createNicArgsForCall)]
	fake.createNicArgsForCall = append(fake.createNicArgsForCall, struct {
		arg1 string
		arg2 *zhmcclient.NIC
	}{arg1, arg2})
	stub := fake.CreateNicStub
	fakeReturns := fake.createNicReturns
	fake.recordInvocation("CreateNic", []interface{}{arg1, arg2})
	fake.createNicMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *NicAPI) CreateNicCallCount() int {
	fake.createNicMutex.RLock()
	defer fake.createNicMutex.RUnlock()
	return len(fake.createNicArgsForCall)
}

func (fake *NicAPI) CreateNicCalls(stub func(string, *zhmcclient.NIC) (*zhmcclient.NIC, error)) {
	fake.createNicMutex.Lock()
	defer fake.createNicMutex.Unlock()
	fake.CreateNicStub = stub
}

func (fake *NicAPI) CreateNicArgsForCall(i int) (string, *zhmcclient.NIC) {
	fake.createNicMutex.RLock()
	defer fake.createNicMutex.RUnlock()
	argsForCall := fake.createNicArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *NicAPI) CreateNicReturns(result1 *zhmcclient.NIC, result2 error) {
	fake.createNicMutex.Lock()
	defer fake.createNicMutex.Unlock()
	fake.CreateNicStub = nil
	fake.createNicReturns = struct {
		result1 *zhmcclient.NIC
		result2 error
	}{result1, result2}
}

func (fake *NicAPI) CreateNicReturnsOnCall(i int, result1 *zhmcclient.NIC, result2 error) {
	fake.createNicMutex.Lock()
	defer fake.createNicMutex.Unlock()
	fake.CreateNicStub = nil
	if fake.createNicReturnsOnCall == nil {
		fake.createNicReturnsOnCall = make(map[int]struct {
			result1 *zhmcclient.NIC
			result2 error
		})
	}
	fake.createNicReturnsOnCall[i] = struct {
		result1 *zhmcclient.NIC
		result2 error
	}{result1, result2}
}

func (fake *NicAPI) DeleteNic(arg1 string, arg2 string) error {
	fake.deleteNicMutex.Lock()
	ret, specificReturn := fake.deleteNicReturnsOnCall[len(fake.deleteNicArgsForCall)]
	fake.deleteNicArgsForCall = append(fake.deleteNicArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteNicStub
	fakeReturns := fake.deleteNicReturns
	fake.recordInvocation("DeleteNic", []interface{}{arg1, arg2})
	fake.deleteNicMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *NicAPI) DeleteNicCallCount() int {
	fake.deleteNicMutex.RLock()
	defer fake.deleteNicMutex.RUnlock()
	return len(fake.deleteNicArgsForCall)
}

func (fake *NicAPI) DeleteNicCalls(stub func(string, string) error) {
	fake.deleteNicMutex.Lock()
	defer fake.deleteNicMutex.Unlock()
	fake.DeleteNicStub = stub
}

func (fake *NicAPI) DeleteNicArgsForCall(i int) (string, string) {
	fake.deleteNicMutex.RLock()
	defer fake.deleteNicMutex.RUnlock()
	argsForCall := fake.deleteNicArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *NicAPI) DeleteNicReturns(result1 error) {
	fake.deleteNicMutex.Lock()
	defer fake.deleteNicMutex.Unlock()
	fake.DeleteNicStub = nil
	fake.deleteNicReturns = struct {
		result1 error
	}{result1}
}

func (fake *NicAPI) DeleteNicReturnsOnCall(i int, result1 error) {
	fake.deleteNicMutex.Lock()
	defer fake.deleteNicMutex.Unlock()
	fake.DeleteNicStub = nil
	if fake.deleteNicReturnsOnCall == nil {
		fake.deleteNicReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteNicReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *NicAPI) GetNic(arg1 string, arg2 string) (*zhmcclient.NIC, error) {
	fake.getNicMutex.Lock()
	ret, specificReturn := fake.getNicReturnsOnCall[len(fake.getNicArgsForCall)]
	fake.getNicArgsForCall = append(fake.getNicArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetNicStub
	fakeReturns := fake.getNicReturns
	fake.recordInvocation("GetNic", []interface{}{arg1, arg2})
	fake.getNicMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *NicAPI) GetNicCallCount() int {
	fake.getNicMutex.RLock()
	defer fake.getNicMutex.RUnlock()
	return len(fake.getNicArgsForCall)
}

func (fake *NicAPI) GetNicCalls(stub func(string, string) (*zhmcclient.NIC, error)) {
	fake.getNicMutex.Lock()
	defer fake.getNicMutex.Unlock()
	fake.GetNicStub = stub
}

func (fake *NicAPI) GetNicArgsForCall(i int) (string, string) {
	fake.getNicMutex.RLock()
	defer fake.getNicMutex.RUnlock()
	argsForCall := fake.getNicArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *NicAPI) GetNicReturns(result1 *zhmcclient.NIC, result2 error) {
	fake.getNicMutex.Lock()
	defer fake.getNicMutex.Unlock()
	fake.GetNicStub = nil
	fake.getNicReturns = struct {
		result1 *zhmcclient.NIC
		result2 error
	}{result1, result2}
}

func (fake *NicAPI) GetNicReturnsOnCall(i int, result1 *zhmcclient.NIC, result2 error) {
	fake.getNicMutex.Lock()
	defer fake.getNicMutex.Unlock()
	fake.GetNicStub = nil
	if fake.getNicReturnsOnCall == nil {
		fake.getNicReturnsOnCall = make(map[int]struct {
			result1 *zhmcclient.NIC
			result2 error
		})
	}
	fake.getNicReturnsOnCall[i] = struct {
		result1 *zhmcclient.NIC
		result2 error
	}{result1, result2}
}

func (fake *NicAPI) ListNics(arg1 string) ([]string, error) {
	fake.listNicsMutex.Lock()
	ret, specificReturn := fake.listNicsReturnsOnCall[len(fake.listNicsArgsForCall)]
	fake.listNicsArgsForCall = append(fake.listNicsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ListNicsStub
	fakeReturns := fake.listNicsReturns
	fake.recordInvocation("ListNics", []interface{}{arg1})
	fake.listNicsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *NicAPI) ListNicsCallCount() int {
	fake.listNicsMutex.RLock()
	defer fake.listNicsMutex.RUnlock()
	return len(fake.listNicsArgsForCall)
}

func (fake *NicAPI) ListNicsCalls(stub func(string) ([]string, error)) {
	fake.listNicsMutex.Lock()
	defer fake.listNicsMutex.Unlock()
	fake.ListNicsStub = stub
}

func (fake *NicAPI) ListNicsArgsForCall(i int) string {
	fake.listNicsMutex.RLock()
	defer fake.listNicsMutex.RUnlock()
	argsForCall := fake.listNicsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *NicAPI) ListNicsReturns(result1 []string, result2 error) {
	fake.listNicsMutex.Lock()
	defer fake.listNicsMutex.Unlock()
	fake.ListNicsStub = nil
	fake.listNicsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *NicAPI) ListNicsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listNicsMutex.Lock()
	defer fake.listNicsMutex.Unlock()
	fake.ListNicsStub = nil
	if fake.listNicsReturnsOnCall == nil {
		fake.listNicsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listNicsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *NicAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createNicMutex.RLock()
	defer fake.createNicMutex.RUnlock()
	fake.deleteNicMutex.RLock()
	defer fake.deleteNicMutex.RUnlock()
	fake.getNicMutex.RLock()
	defer fake.getNicMutex.RUnlock()
	fake.listNicsMutex.RLock()
	defer fake.listNicsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *NicAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ zhmcclient.NicAPI = new(NicAPI)
